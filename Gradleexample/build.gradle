import java.util.concurrent.Callable
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

apply plugin : 'groovy'
apply plugin : 'application'
apply plugin : 'idea'

dependencies{
    compile groovy
}

mainClassName = "gradleExample.GradleClass1"

task hello (type: GreetingTask1)

class GreetingTask1 extends DefaultTask {
    @TaskAction
    def greet() {

    }
}

task helloDoLast{
    doLast {
        println "do last at the test"
    }
}

4.times{ counter->
    task "task${counter}" <<{
        println "I am on task ${counter}"
    }
}

task0.dependsOn task1,task2


task extraProp {
    ext.myProperty = "my extra property"
}

task useExtraProperty <<{
    println extraProp.myProperty
}

useExtraProperty << {
    println "this is the additional one"
}

run {
    println "print this line"
}

task dropWizardStart << {
    ExecutorService es = Executors.newSingleThreadExecutor()
    es.submit({ run.execute(); } as Callable)
    es.shutdown()
    while (true) {
        try {
            new URL("http://localhost:9999/ping").text
            break;
        }
        catch (IOException e) {
            sleep(100);
        }
    }
}